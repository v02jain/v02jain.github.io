{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dashboard/actions/dashboard.actions.ts","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.scss","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/dashboard/dashboard.module.ts","webpack:///./src/app/dashboard/effects/dashboard.effects.ts","webpack:///./src/app/dashboard/reducers/index.ts","webpack:///./src/app/dashboard/stats.service.ts","webpack:///./src/app/reducers/index.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\r\\n<h2>Coronavirus Dashboard</h2>\\r\\n<router-outlet></router-outlet>\\r\\n\"","module.exports = \"h2 {\\n  text-align: center;\\n  font-size: 40px;\\n  margin-bottom: 2rem; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvRDpcXGNvdmlkLTE5XFxOZ3J4L3NyY1xcYXBwXFxhcHAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDRSxtQkFBa0I7RUFDbEIsZ0JBQWU7RUFDZixvQkFBbUIsRUFDcEIiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaDIge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDQwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcclxufVxyXG4iXX0= */\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'tracker-app';\r\n}\r\n","import { DashboardModule } from './dashboard/dashboard.module';\r\n\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from '../environments/environment';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { reducers } from './reducers';\r\nimport { EffectsModule } from '@ngrx/effects';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    RouterModule.forRoot([\r\n      {\r\n        path: 'details',\r\n        loadChildren: () =>\r\n          import('./details/details.module').then((m) => m.DetailsModule),\r\n      },\r\n      { path: '**', redirectTo: '/' }\r\n    ]),\r\n    DashboardModule.forRoot(),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 25,\r\n      logOnly: environment.production,\r\n    }),\r\n\r\n    StoreModule.forRoot(reducers, {\r\n      runtimeChecks: {\r\n        strictStateImmutability: true,\r\n        strictActionImmutability: true,\r\n      },\r\n    }),\r\n    EffectsModule.forRoot(),\r\n\r\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Global } from './../interfaces/global';\r\nimport { createAction, props } from '@ngrx/store';\r\nimport { CountryData } from '../interfaces/countries';\r\n\r\nexport const loadCountries = createAction('[Dashboard] Load Countries');\r\nexport const loadGlobal = createAction('[Dashboard] Load Global Details');\r\n\r\nexport const selectedCountry = createAction(\r\n  '[Dashboard] Selected Country',\r\n  props<{ countrySelected: CountryData }>()\r\n);\r\n\r\nexport const loadedCountryList = createAction(\r\n  '[Countries API] Countries Loaded Success',\r\n  props<{ countryList: CountryData[] }>()\r\n);\r\n\r\nexport const failLoadCountries = createAction(\r\n  '[Countries API] Countries Loaded Error'\r\n);\r\n\r\nexport const loadedGlobal = createAction(\r\n  '[Global API] Global Loaded Success',\r\n  props<{ globaldetails: Global }>()\r\n);\r\n\r\nexport const failLoadGlobal = createAction(\r\n  '[Global API] Global Loaded Error'\r\n);\r\n\r\nexport const loadedCountryConfirmed = createAction(\r\n  '[Countries Confirmed API] Countries Confirmed Cases Loaded',\r\n  props<{ confirmedList: {} }>()\r\n);\r\n\r\nexport const loadedCountryRecovered = createAction(\r\n  '[Countries Recovered API] Countries Recovered Cases Loaded',\r\n  props<{ recoveredList: {} }>()\r\n);\r\n\r\nexport const loadedCountryDead = createAction(\r\n  '[Countries Dead API] Countries Dead Cases Loaded',\r\n  props<{ deadList: {} }>()\r\n);\r\n\r\nexport const failLoadCountryData = createAction(\r\n  '[Selected Country Data API] CountryData Loaded Error'\r\n);","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col\\\">\\r\\n     <div class=\\\"card text-white bg-primary mb-3\\\">\\r\\n       <div class=\\\"card-header\\\">Total Cases</div>\\r\\n       <div class=\\\"card-body\\\">\\r\\n         <p class=\\\"card-text\\\">{{ (global$ | async)?.TotalConfirmed }}</p>\\r\\n       </div>\\r\\n     </div>\\r\\n    </div>\\r\\n     <div class=\\\"col\\\">\\r\\n       <div class=\\\"card text-white bg-danger mb-3\\\">\\r\\n         <div class=\\\"card-header\\\">Total Deaths</div>\\r\\n         <div class=\\\"card-body\\\">\\r\\n           <p class=\\\"card-text\\\">{{ (global$ | async)?.TotalDeaths }}</p>\\r\\n         </div>\\r\\n       </div>\\r\\n     </div>\\r\\n   <div class=\\\"col\\\">\\r\\n     <div class=\\\"col card text-white bg-success mb-3\\\">\\r\\n       <div class=\\\"card-header\\\">Total Recovered</div>\\r\\n       <div class=\\\"card-body\\\">\\r\\n         <p class=\\\"card-text\\\">{{ (global$ | async)?.TotalRecovered }}</p>\\r\\n       </div>\\r\\n     </div>\\r\\n   </div>\\r\\n   </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<form class=\\\"container\\\" [formGroup]=\\\"countryForm\\\">\\r\\n  <select formControlName=\\\"country\\\" class=\\\"custom-select custom-select-lg mb-3\\\">\\r\\n    <option\\r\\n      *ngFor=\\\"let country of countryList$ | async\\\"\\r\\n      [ngValue]=\\\"country.CountryCode\\\"\\r\\n      >{{ country.Country }} ({{ country.CountryCode }})</option\\r\\n    >\\r\\n  </select>\\r\\n  \\r\\n</form>\\r\\n\\r\\n<div class=\\\"container\\\" *ngIf=\\\"countrySelected\\\">\\r\\n  <h3 class=\\\"text-align\\\">\\r\\n    {{ (countrySelectedData$ | async).Country }}-{{\\r\\n      (countrySelectedData$ | async).CountryCode\\r\\n    }}\\r\\n  </h3>\\r\\n\\r\\n  <div class=\\\"alert alert-primary\\\" role=\\\"alert\\\">\\r\\n    Total Cases - {{ (countrySelectedData$ | async)?.TotalConfirmed }}\\r\\n  </div>\\r\\n  <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\r\\n    Total Deaths - {{ (countrySelectedData$ | async)?.TotalDeaths }}\\r\\n  </div>\\r\\n  <div class=\\\"alert alert-success\\\" role=\\\"alert\\\">\\r\\n    Total Recovered - {{ (countrySelectedData$ | async)?.TotalRecovered }}\\r\\n  </div>\\r\\n  <div class=\\\"text-align\\\">\\r\\n    <button routerLink=\\\"/details\\\" type=\\\"button\\\" class=\\\"btn btn-info\\\">\\r\\n      Go to details\\r\\n    </button>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- <h3 class=\\\"heading\\\">World Data</h3>\\r\\n<div class=\\\"world-map\\\"></div>\\r\\n<h3 class=\\\"heading\\\">Country Specific</h3>\\r\\n<div class=\\\"select\\\">\\r\\n  <select id=\\\"country\\\"></select>\\r\\n</div>\\r\\n<div class=\\\"country-chart\\\"></div> -->\\r\\n<!-- \\r\\n<br />\\r\\n<br />\\r\\n<br />\\r\\n<br /> -->\\r\\n<br />\\r\\n<p class=\\\"info text-align\\\">\\r\\n  The API used is available\\r\\n  <a\\r\\n    href=\\\"https://documenter.getpostman.com/view/10808728/SzS8rjbc?version=latest\\\"\\r\\n    target=\\\"_blank\\\"\\r\\n    >here</a\\r\\n  >.\\r\\n</p>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Global } from './interfaces/global';\r\nimport { CountryData } from './interfaces/countries';\r\nimport { StatsService } from './stats.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  loadCountries,\r\n  selectedCountry,\r\n  loadGlobal,\r\n} from './actions/dashboard.actions';\r\nimport { AppState } from '../reducers';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss'],\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  constructor(\r\n    private statService: StatsService,\r\n    private store: Store<AppState>\r\n  ) {}\r\n\r\n  public global$: Observable<Global> = this.store.select(\r\n    (state) => state.dashboard.globaldetails\r\n  );\r\n  public countryList$: Observable<CountryData[]> = this.store.select(\r\n    (state) => state.dashboard.countryList\r\n  );\r\n  public countrySelectedData$: Observable<CountryData> = this.store.select(\r\n    (state) => state.dashboard.countrySelected\r\n  );\r\n\r\n  public countryForm: FormGroup;\r\n\r\n  public countrySelected = false;\r\n\r\n  public countrySlectedCode: String = 'IN';\r\n\r\n  ngOnInit() {\r\n    this.global$.subscribe((val) => {\r\n      if (!val) {\r\n        this.store.dispatch(loadGlobal());\r\n      }\r\n    });\r\n    this.countryList$.subscribe((val) => {\r\n      if (!val) {\r\n        this.store.dispatch(loadCountries());\r\n      }\r\n    });\r\n    this.countrySelectedData$.subscribe((val) => {\r\n      if (val) {\r\n        this.countrySelected = true;\r\n        this.countrySlectedCode = val.CountryCode;\r\n      }\r\n    });\r\n    this.countryForm = new FormGroup({\r\n      country: new FormControl(this.countrySlectedCode),\r\n    });\r\n    this.getStations(this.countryForm.controls.country.value);\r\n    this.countryForm.controls.country.valueChanges.subscribe((val) => {\r\n      this.getStations(val);\r\n    });\r\n  }\r\n\r\n  public getStations(stationCode) {\r\n    this.statService\r\n      .countryByCountryCode(stationCode)\r\n      .subscribe((countryStats) => {\r\n        this.store.dispatch(selectedCountry({ countrySelected: countryStats }));\r\n        this.countrySelected = true;\r\n      });\r\n  }\r\n\r\n  //   helllo(){\r\n  //     // World Map\r\n  // google.charts.load(\"current\", {\r\n  //   packages: [\"geochart\"]\r\n  // });\r\n  // google.charts.setOnLoadCallback(drawRegionsMap);\r\n\r\n  // function drawRegionsMap() {\r\n  //   fetch(\"https://api.covid19api.com/summary\")\r\n  //     .then((res) => res.json())\r\n  //     .then((res) => {\r\n  //       // Set number of cases\r\n  //       setNumbers(res.Global);\r\n  //       let cases = [];\r\n\r\n  //       res.Countries.forEach((country) => {\r\n  //         cases.push([country.CountryCode, country.TotalConfirmed]);\r\n  //       });\r\n\r\n  //       var data = google.visualization.arrayToDataTable([\r\n  //         [\"Country\", \"Number of cases\"],\r\n  //         ...cases\r\n  //       ]);\r\n\r\n  //       var options = {\r\n  //         colorAxis: { colors: [\"#3498db\", \"#ff7675\", \"#ff6b81\", \"#c0392b\"] }\r\n  //       };\r\n\r\n  //       var chart = new google.visualization.GeoChart(\r\n  //         document.querySelector(\".world-map\")\r\n  //       );\r\n\r\n  //       chart.draw(data, options);\r\n  //     });\r\n  // }\r\n\r\n  // // Line charts\r\n  // google.charts.load(\"current\", { packages: [\"corechart\"] });\r\n  // google.charts.setOnLoadCallback(drawChart);\r\n\r\n  // // var countryName = 'india'; // Default country name\r\n\r\n  // function drawChart(countryName = \"india\") {\r\n  //   fetch(\r\n  //     \"https://api.covid19api.com/total/country/\" +\r\n  //       countryName +\r\n  //       \"/status/confirmed\"\r\n  //   )\r\n  //     .then((res) => res.json())\r\n  //     .then((res) => {\r\n  //       let cases = [];\r\n  //       if (res.length !== 0) {\r\n  //         res.forEach((day) => {\r\n  //           cases.push([day.Date.slice(0, 10), day.Cases]);\r\n  //         });\r\n\r\n  //         var data = google.visualization.arrayToDataTable([\r\n  //           [\"Date\", \"Cases\"],\r\n  //           ...cases\r\n  //         ]);\r\n\r\n  //         var options = {\r\n  //           title: \"Number of cases\",\r\n  //           legend: { position: \"bottom\" }\r\n  //         };\r\n\r\n  //         var chart = new google.visualization.LineChart(\r\n  //           document.querySelector(\".country-chart\")\r\n  //         );\r\n\r\n  //         chart.draw(data, options);\r\n  //       } else {\r\n  //         document.querySelector(\".country-chart\").innerHTML = \"No data\";\r\n  //       }\r\n  //     });\r\n  // }\r\n\r\n  //  setNumbers(numbers) {\r\n  //   document.getElementById(\"cases\").innerHTML = numbers.TotalConfirmed;\r\n  //   document.getElementById(\"deaths\").innerHTML = numbers.TotalDeaths;\r\n  //   document.getElementById(\"recovered\").innerHTML = numbers.TotalRecovered;\r\n  // }\r\n\r\n  // const select = document.getElementById(\"country\");\r\n  // window.onload = function () {\r\n  //   fetch(\"https://api.covid19api.com/countries\")\r\n  //     .then((res) => res.json())\r\n  //     .then((data) => {\r\n  //       data.forEach((d) => {\r\n  //         select.innerHTML += `<option value=\"${d.Slug}\">${d.Country}</option>`;\r\n  //       });\r\n  //       select.value = \"india\";\r\n  //     });\r\n  // };\r\n\r\n  // select.addEventListener(\"change\", () => {\r\n  //   document.querySelector(\".country-chart\").innerHTML = \"\";\r\n  //   drawChart(select.value);\r\n  // });\r\n\r\n  //   }\r\n}\r\n","import { RouterModule } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromDashboard from './reducers';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { DashboardEffects } from './effects/dashboard.effects';\r\n\r\n@NgModule({\r\n  declarations: [DashboardComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: '',\r\n        component: DashboardComponent,\r\n      },\r\n    ]),\r\n    StoreModule.forFeature(\r\n      fromDashboard.dashboardFeatureKey,\r\n      fromDashboard.reducer\r\n    ),\r\n    HttpClientModule,\r\n    EffectsModule.forFeature([DashboardEffects])\r\n  ],\r\n\r\n  exports: [DashboardComponent],\r\n})\r\nexport class DashboardModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: DashboardModule,\r\n      providers: []\r\n    }\r\n  }\r\n}\r\n","import {\r\n  loadGlobal,\r\n  failLoadGlobal,\r\n  loadedGlobal,\r\n  selectedCountry,\r\n  loadedCountryConfirmed,\r\n  failLoadCountryData,\r\n  loadedCountryDead,\r\n  loadedCountryRecovered,\r\n} from './../actions/dashboard.actions';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\r\nimport { StatsService } from '../stats.service';\r\nimport {\r\n  loadCountries,\r\n  loadedCountryList,\r\n  failLoadCountries,\r\n} from '../actions/dashboard.actions';\r\n\r\n@Injectable()\r\nexport class DashboardEffects {\r\n  loadCountries$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadCountries),\r\n      mergeMap(() =>\r\n        this.statsService.getCountriesList().pipe(\r\n          map((countries) => loadedCountryList({ countryList: countries })),\r\n          catchError(() => of(failLoadCountries()))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getGlobalDetails$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadGlobal),\r\n      mergeMap(() =>\r\n        this.statsService.getGlobalDetail().pipe(\r\n          map((details) => loadedGlobal({ globaldetails: details })),\r\n          catchError(() => of(failLoadGlobal()))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getCountrySelectedConfirmedDetails$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(selectedCountry),\r\n      mergeMap((action) =>\r\n        this.statsService.getConfirmedByCountry(action.countrySelected.CountryCode).pipe(\r\n          map((confirmed) =>\r\n          loadedCountryConfirmed({ confirmedList: confirmed })\r\n          ),\r\n          catchError(() => of(failLoadCountryData()))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getCountrySelectedRecoveredDetails$ = createEffect(() =>\r\n  this.actions$.pipe(\r\n    ofType(selectedCountry),\r\n    mergeMap((action) =>\r\n      this.statsService.getRecoveredByCountry(action.countrySelected.CountryCode).pipe(\r\n        map((recovered) =>\r\n        loadedCountryRecovered({ recoveredList: recovered })\r\n        ),\r\n        catchError(() => of(failLoadCountryData()))\r\n      )\r\n    )\r\n  )\r\n);\r\n\r\ngetCountrySelectedDeadDetails$ = createEffect(() =>\r\nthis.actions$.pipe(\r\n  ofType(selectedCountry),\r\n  mergeMap((action) =>\r\n    this.statsService.getDeadByCountry(action.countrySelected.CountryCode).pipe(\r\n      map((dead) =>\r\n      loadedCountryDead({ deadList: dead })\r\n      ),\r\n      catchError(() => of(failLoadCountryData()))\r\n    )\r\n  )\r\n)\r\n);\r\n\r\n  constructor(private actions$: Actions, private statsService: StatsService) {}\r\n}\r\n","import { loadedGlobal } from \"./../actions/dashboard.actions\";\r\nimport { Global } from \"./../interfaces/global\";\r\nimport { CountryData } from \"./../interfaces/countries\";\r\nimport { Action, createReducer, on } from \"@ngrx/store\";\r\nimport * as DashboardActions from \"../actions/dashboard.actions\";\r\n\r\nexport const dashboardFeatureKey = \"dashboard\";\r\n\r\nexport interface DashboardState {\r\n  countryList: CountryData[];\r\n  countrySelected: CountryData;\r\n  globaldetails: Global;\r\n  countryConfirmedData: any;\r\n  countryRecoveredData: any;\r\n  countryDeadData: any;\r\n}\r\n\r\nexport const initialState: DashboardState = {\r\n  countryList: null,\r\n  countrySelected: null,\r\n  globaldetails: null,\r\n  countryConfirmedData: null,\r\n  countryRecoveredData: null,\r\n  countryDeadData: null\r\n};\r\n\r\nconst dashboardReducer = createReducer(\r\n  initialState,\r\n  on(DashboardActions.loadedCountryList, (state, action) => ({\r\n    ...state,\r\n    countryList: action.countryList,\r\n  })),\r\n  on(DashboardActions.selectedCountry, (state, action) => ({\r\n    ...state,\r\n    countrySelected: action.countrySelected,\r\n  })),\r\n  on(DashboardActions.loadedGlobal, (state, action) => ({\r\n    ...state,\r\n    globaldetails: action.globaldetails,\r\n  })),\r\n  on(DashboardActions.loadedCountryConfirmed, (state, action) => ({\r\n    ...state,\r\n    countryConfirmedData: action.confirmedList,\r\n  })),\r\n  on(DashboardActions.loadedCountryRecovered, (state, action) => ({\r\n    ...state,\r\n    countryRecoveredData: action.recoveredList\r\n  })),\r\n  on(DashboardActions.loadedCountryDead, (state, action) => ({\r\n    ...state,\r\n    countryDeadData: action.deadList,\r\n  }))\r\n);\r\n\r\nexport function reducer(state: DashboardState | undefined, action: Action) {\r\n  return dashboardReducer(state, action);\r\n}\r\n","import { Global } from './interfaces/global';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Summary } from './interfaces/response';\nimport { map } from 'rxjs/operators';\nimport { CountryData } from './interfaces/countries';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatsService {\n  constructor(private http: HttpClient) {}\n  private configUrl = 'https://api.covid19api.com/summary';\n  private getConfig(): Observable<Summary> {\n    return this.http.get<Summary>(this.configUrl);\n  }\n\n  // private getCountryDataConfig(country) {\n  //   const countryDataUrl = \"https://api.covid19api.com/country/\"+country+\"/status/confirmed/live\";\n  //   return this.http.get(countryDataUrl);\n  // }\n\n  getGlobalDetail(): Observable<Global> {\n    return this.getConfig().pipe(map((res) => res.Global));\n  }\n\n  getCountriesList(): Observable<Array<CountryData>> {\n    return this.getConfig().pipe(\n      map((data: Summary) =>\n        data\n          ? data.Countries.map((countryData: CountryData) => countryData)\n          : []\n      )\n    );\n  }\n\n  public countryByCountryCode(\n    countryCode: String\n  ): Observable<CountryData | undefined> {\n    return this.getCountriesList().pipe(\n      map(\n        (countries: CountryData[]): CountryData =>\n          countries.find(\n            (country: CountryData): boolean =>\n              country.CountryCode === countryCode\n          )\n      )\n    );\n  }\n  public getConfirmedByCountry(countryCode: String) {\n    return this.http.get(\n      'https://api.covid19api.com/country/' +\n        countryCode +\n        '/status/confirmed/live'\n    );\n  }\n\n  public getDeadByCountry(countryCode: String) {\n    return this.http.get(\n      'https://api.covid19api.com/country/' +\n        countryCode +\n        '/status/deaths/live'\n    );\n  }\n\n  public getRecoveredByCountry(countryCode: String) {\n    return this.http.get(\n      'https://api.covid19api.com/country/' +\n        countryCode +\n        '/status/recovered/live'\n    );\n  }\n}\n","import { DashboardState } from './../dashboard/reducers/index';\r\nimport { createReducer, Action } from '@ngrx/store';\r\nimport { DetailsState } from '../details/reducers';\r\n\r\nexport interface AppState {\r\n  dashboard: DashboardState;\r\n  details: DetailsState;\r\n}\r\n\r\nexport const initialState: AppState = {\r\n  dashboard: null,\r\n  details: null,\r\n};\r\n\r\nconst appReducer = createReducer(initialState);\r\n\r\nexport function reducers(state: AppState | undefined, action: Action) {\r\n  return appReducer(state, action);\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}